name: Build common deps

on:
  workflow_dispatch:
    inputs:
      publish-www:
        description: 'Publish on WWW'
        required: false
        type: boolean
      build-type:
        description: 'Build type'
        required: false
        type: string
      BUILD_TYPE:
        type: environment
        
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  PROJECT_NAME: test
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        qt-version: [ 5, 6 ]
        name: [ "windows-msvc", "windows-mingw", "linux", "macos-arm64", "macos-x86_64" ]
        include:
          - name: "windows-msvc"
            os: "windows-latest"
          - name: "windows-mingw"
            os: "windows-latest"
          - name: "linux"
            os: "ubuntu-latest"
          - name: "macos-arm64"
            os: "macos-14"
          - name: "macos-x86_64"
            os: "macos-13"

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.runs-on == startsWith( matrix.runs-on, 'windows') && 'msys2bash {0}' || 'bash -le {0}' }}
    steps: 
    - name: setup msys
      if: ${{ runner.os == 'Windows' }}
      run: |
        export PATH="/c/msys64/usr/bin:$PATH"
        bash -lc 'curl -L https://freeshell.de/arturwro/pub/MINGW/donarturo11.repo >> /etc/pacman.conf'
        bash -lc 'pacman -Syu --noconfirm'
        bash -lc 'pacman -S --noconfirm git'
        echo "C:\\msys64\\usr\\bin" >> $GITHUB_PATH
    - name: Setup direnv
      run: |
        echo "HOME: $(cd ~; pwd)"
        kernel=$(uname -s | tr "[:upper:]" "[:lower:]")
        case "${kernel}" in
          linux*) sudo apt-get update -y; sudo apt-get -y install direnv ;;
          darwin*) brew install direnv ;;
          mingw*|msys*) pacman -S --noconfirm direnv ;;
          *)
            git clone https://github.com/direnv/direnv
            bash ./direnv/install.sh
            ;;
        esac
        echo 'echo "Welcome to GithubAction environment"' >> ~/.bashrc
        echo 'eval "$(direnv hook bash)"' >> ~/.bashrc
        cat ~/.bashrc
        
    - name: run setup settings
      run: |
        cd $RUNNER_WORKSPACE
        touch .envrc
        echo "export ROOT_WORKDIR='$(pwd)'" >> .envrc
        direnv allow .
    - name: Test
      run: |
        echo "outside"
        env | grep '^ROOT'
        bash -lc "echo 'inside'; env | grep '^ROOT'" || echo '!'
    - name: CWD before checkout
      run: |
        CWD=$(cd $RUNNER_WORKSPACE; pwd)
        mkdir -vp ${CWD}/out
        (cd ~; pwd)
        find $CWD
        env >> ${CWD}/out/$(basename $0).env
        cd $GITHUB_WORKSPACE
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup common environment
      run: |
         CWD=$(cd $RUNNER_WORKSPACE; pwd)
         which direnv && echo "direnv FOUND" || echo "direnv not FOUND"
         env >> ${CWD}/out/$(basename $0).env
         CWD=$(cd $RUNNER_WORKSPACE; pwd)
         echo "FULL_NAME=${{ env.PROJECT_NAME }}-qt${{ matrix.qt-version }}-${{ matrix.name }}" >> $CWD/project.env
    - name: install-dependencies
      run: echo "PWD=$(pwd)"
    - name: setup control artifacts
      run: |
        CWD=$(cd $RUNNER_WORKSPACE; pwd)
        env >> ${CWD}/out/$(basename $0).env
        export ARTIFACTS_DIR=$CWD/out
        [ ! -e $ARTIFACTS_DIR ] && mkdir -p $ARTIFACTS_DIR
        echo "::notice::Save to $ARTIFACTS_DIR"
        echo '${{ toJSON(env) }}' >> $ARTIFACTS_DIR/env.json
        echo '${{ toJSON(github) }}' >> $ARTIFACTS_DIR/github.json
        echo '${{ toJSON(runner) }}' >> $ARTIFACTS_DIR/runner.json
        env | sort >> $ARTIFACTS_DIR/environment
        echo "ARTIFACTS_DIR=$ARTIFACTS_DIR" >> $CWD/project.env
        cat $CWD/project.env >> $GITHUB_ENV

    - name: Uploading ${{ env.FULL_NAME }}
      uses: actions/upload-artifact@v4
      with:
        name: "${{ env.FULL_NAME }}"
        path: "${{ runner.workspace }}/out/*"
