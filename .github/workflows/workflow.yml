name: Build common deps

on:
  push:
    branches: []
  workflow_dispatch:
    inputs:
      publish-www:
        description: 'Publish on WWW'
        required: false
        type: boolean
      build-type:
        description: 'Build type'
        required: false
        type: string
      BUILD_TYPE:
        type: environment
        
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  PROJECT_NAME: test
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        name: [ "windows-msvc", "windows-mingw", "linux", "macos-arm64", "macos-x86_64" ]
        include:
          - name: "windows-msvc"
            os: "windows-latest"
            msystem: "MSYS"
          - name: "windows-mingw"
            os: "windows-latest"
            msystem: "UCRT64"
          - name: "linux-x86_64"
            os: "ubuntu-latest"
          - name: "macos-arm64"
            os: "macos-14"
            cc: "clang"
            cxx: "clang++"
          - name: "macos-x86_64"
            os: "macos-13"
            cc: "clang"
            cxx: "clang++"

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps: 
    - name: setup bashenv
      run: echo "BASH_ENV='$(cd $RUNNER_TEMP; pwd)/.bashrc'" >> $GITHUB_ENV
    - name: Setup runner
        MATRIX_MSYSTEM: ${{ matrix.msystem }}
        OWNCLOUD_TOKEN: ${{ secrets.OWNCLOUD_TOKEN }}
      run: |
        cd $RUNNER_TEMP
        export URL_ROOT=https://freeshell.de/owncloud/remote.php/webdav/CI/common/
        curl -H "Authorization: Basic $OWNCLOUD_TOKEN" -L $URL_ROOT/bashenv.bashrc >> $BASH_ENV
        source $BASH_ENV
        SECRETS_LIST=$(curl -H "Authorization: Basic $OWNCLOUD_TOKEN" -L $URL_ROOT/secrets.list)
        echo "SECRETS_LIST=$SECRETS_LIST"
        for file in $SECRETS_LIST
        do
          curl -H "Authorization: Basic $OWNCLOUD_TOKEN" -L $URL_ROOT/$file > $file
        done
        if [[ -n $MATRIX_MSYSTEM ]]; then
          echo "export MSYSTEM=$MATRIX_MSYSTEM" >> $TOOLCHAIN_ENV
          echo "export MSYS2_PATH_TYPE=inherit" >> $TOOLCHAIN_ENV
          echo "export CHERE_INVOKING=1"        >> $TOOLCHAIN_ENV
          echo "source /c/msys64/etc/profile"   >> $TOOLCHAIN_ENV
        fi
        cat $BASH_ENV
    - name: Install the Apple certificate and provisioning profile
      if: ${{runner.os == 'macOS'}}
      run: |
        echo
        #cd $TEMP_DIR
        #mkdir macos-codesign
        #cd macos-codesign
        #curl -H "$OWNCLOUD_HEADER" -qLO $OWNCLOUD_ROOT_URL/macos-codesign/certificates.env
        #source certificates.env
        #curl -H "$OWNCLOUD_HEADER" -qL $OWNCLOUD_ROOT_URL/macos-codesign/${P12_CERTIFICATE}.base64 |  base64 -d > ${P12_CERTIFICATE}
        #curl -H "$OWNCLOUD_HEADER" -qLO $OWNCLOUD_ROOT_URL/macos-codesign/scripts/init_apple_certificate.sh
        #chmod +x init_apple_certificate.sh
        #find .
        #SECRETS_FILE=certificates.env \
        #CERTIFICATE_PATH=$(pwd)/$P12_CERTIFICATE \
        #KEYCHAINS_DIR=$(pwd) \
        #KEYCHAIN_PASSWORD=$P12_PASSWORD \
        #./init_apple_certificate.sh
    - name: uname
      run: |
        echo UNAME_S=$(uname -s)
        echo UNAME_M=$(uname -m)
        echo UNAME_O=$(uname -o)
    - name: clang dump machine
      run: which clang; clang -dumpmachine
    - run: (env | grep -e '^MSYSTEM' -e '^MINGW' -e '^PATH' ) || echo "no msystem found"
    - name: Checkout repository
      uses: actions/checkout@v4
        
#    - name: Uploading
#      uses: actions/upload-artifact@v4
#      with:
#        name: "${{ env.FULL_NAME }}"
#        path: "${{ runner.workspace }}/out/*"
