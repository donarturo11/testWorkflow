name: Build common deps

on:
  push:
    branches: []
  workflow_dispatch:
    inputs:
      publish-www:
        description: 'Publish on WWW'
        required: false
        type: boolean
      build-type:
        description: 'Build type'
        required: false
        type: string
      BUILD_TYPE:
        type: environment
        
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  PROJECT_NAME: test
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        name: [ "windows-msvc", "windows-mingw", "macos-arm64", "macos-x86_64", "linux-x86_64", "linux-arm" ]
        include:
          - name: "windows-msvc"
            os: "windows-latest"
            msystem: "MSYS"
          - name: "windows-mingw"
            os: "windows-latest"
            msystem: "UCRT64"
          - name: "macos-arm64"
            os: "macos-15"
          - name: "macos-x86_64"
            os: "macos-15-intel"
          - name: "linux-x86_64"
            os: "ubuntu-latest"
          - name: "linux-arm"
            os: "ubuntu-24.04-arm"

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
    - name: check scripts
      run: |
       find $RUNNER_TEMP -iname '*.sh' -print0 | while IFS= read -d '' -r script
       do
         echo "::group::$script"
         cat "$script"
         echo "::endgroup::"
       done 
    - if: ${{ matrix.msystem }}
      run: |
        echo "C:\\msys64\\usr\\bin" >> $GITHUB_PATH
        echo "MSYSTEM=${{ matrix.msystem }}" >> $GITHUB_ENV
    - name: setup bashenv
      id: setup-bashenv
      run: |
        BASH_ENV=$(cd $RUNNER_WORKSPACE; pwd)/.bashrc
        touch $BASH_ENV
        echo "BASH_ENV=$BASH_ENV" >> $GITHUB_ENV
    - name: Test variables
      shell: bash --norc --noprofile {0}
      run: |
        (env | grep -e '^MSYS' -e '^MINGW') || echo ""
    - name: Get host infos
      run: |
        echo "OSTYPE=$OSTYPE"
        echo "MACHTYPE=$MACHTYPE"
        echo "HOSTTYPE=$HOSTTYPE"
    - name: uname
      run: |
        echo UNAME_S=$(uname -s)
        echo UNAME_M=$(uname -m)
        echo UNAME_O=$(uname -o)
#    - uses: donarturo11/testWorkflow/.github/actions/test-env@main
#      with:
#        var1: 'val1'
#        var2: 'val2'
    - name: test jq yq
      run: |
        jq --version && which jq || echo "jq not found"
        yq --version && which yq || echo "yq not found"
        _dotenv_pat=". | to_entries | map(\"\(.key)='\(.value)'\") | .[]"
        [[ ! -e out ]] && mkdir out
        jq <<< "${{ toJSON(secrets) }}"
    - name: dump machine
      id: dump-machine
      run: (which clang &> /dev/null) && clang -dumpmachine || gcc -dumpmachine
    - run: (env | grep -e '^MSYSTEM' -e '^MINGW' -e '^PATH' ) || echo "no msystem found"
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: check scripts 2
      id: check-scripts
      run: |
       find $RUNNER_TEMP -iname '*.sh' -print0 | while IFS= read -d '' -r script
       do
         echo "::group::$script"
         cat "$script"
         echo "::endgroup::"
       done 
    
    - name: Uploading
      uses: actions/upload-artifact@v4
      with:
        name: "${{ github.run-id }}"
        path: "out/*"
